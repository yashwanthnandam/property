from django.db import models
from django.contrib.postgres.fields import ArrayField

class MetaData(models.Model):
    prop_photo_count = models.PositiveIntegerField(null=True,verbose_name="Prop Photo Count")
    prop_video_count = models.PositiveIntegerField(null=True,verbose_name="Prop Video Count")


class FormattedLandmarkDetails(models.Model):
    category = models.CharField(null=True,max_length=100)
    text = models.CharField(null=True,max_length=100)
    className = models.CharField(null=True,max_length=100)
    icon = models.URLField(null=True)


class Location(models.Model):
    city = models.IntegerField(blank=True, null=True)
    cityName = models.CharField(max_length=100)
    buildingId = models.IntegerField(null=True)
    buildingName = models.CharField(max_length=100)
    societyName = models.CharField(max_length=100)
    localityId = models.IntegerField(null=True)
    localityName = models.CharField(max_length=100)
    address = models.CharField(max_length=200)

    class Meta:
        verbose_name = "Location"

class SuperProfile(models.Model):
    contact_company_name = models.CharField(max_length=255)
    photo_url = models.URLField(null=True)
    since = models.IntegerField(null=True)
    total_eoi = models.PositiveIntegerField(blank=True, null=True)


class Profile(models.Model):
    contact_name = models.CharField(max_length=100)
    contact_company_name = models.CharField(max_length=100)
    class_label = models.CharField(max_length=1)
    contact_city = models.PositiveSmallIntegerField(null=True)
    assigned_to_profileid = models.PositiveIntegerField(null=True)
    url = models.URLField(blank=True, null=True)
    photo_url = models.URLField(null=True)
    dealer_seo_url = models.CharField(max_length=200, blank=True, null=True)
    super_profile = models.ForeignKey(SuperProfile,null=True ,on_delete=models.SET_NULL)


class MapDetails(models.Model):
    latitude = models.FloatField(null=True,verbose_name='Latitude')
    longitude = models.FloatField(null=True,verbose_name='Longitude')
    zoomLevel = models.PositiveSmallIntegerField(null=True,verbose_name='Zoom Level')
    source = models.CharField(null=True,max_length=10, verbose_name='Source')
    mapAccuracy = models.PositiveSmallIntegerField(null=True,verbose_name='Map Accuracy')
    mapped = models.CharField(null=True,max_length=2,verbose_name='Mapped')

class Formatted(models.Model):
    availability = models.IntegerField(null=True,verbose_name='Availability')
    sub_availability = models.IntegerField(null=True,verbose_name='Sub Availability')
    availability_date = models.DateField(verbose_name='Availability Date', null=True, blank=True)
    avg_price = models.IntegerField(null=True,verbose_name='Average Price')
    price_sqft = models.SmallIntegerField(null=True,verbose_name='Price Per Square Foot')
    logo = models.CharField(null=True,verbose_name='Logo', max_length=1)
    floor_number = models.SmallIntegerField(null=True,verbose_name='Floor Number')
    tenant_preferences = models.CharField(null=True,verbose_name='Tenant Preferences', max_length=2)
    prop_type_label = models.CharField(null=True,verbose_name='Property Type Label', max_length=25)
    furnish_label = models.CharField(null=True,verbose_name='Furnish Label', max_length=12)
    furnishing_attributes = models.TextField(null=True,verbose_name='Furnishing Attributes')
    rera_type = models.CharField(null=True,verbose_name='Rera Type', max_length=4)
    price_in_words = models.CharField(null=True,verbose_name='Price In Words', max_length=20)
    description = models.TextField(null=True,verbose_name='Description')
    havephoto = models.CharField(null=True,verbose_name='Have Photo', max_length=1)
    amenities = models.TextField(null=True,verbose_name='Amenities')
    alt_tag = models.CharField(null=True,verbose_name='Alt Tag', max_length=50)


class Rera(models.Model):
    registration_number = models.CharField(null=True,verbose_name='Registration number', max_length=20)
    registration_status = models.CharField(null=True, verbose_name='Registration status', max_length=20)
    show_flag = models.BooleanField(null=True, verbose_name='Show flag',)

class FSLData(models.Model):
    localityId = models.PositiveIntegerField(null=True,verbose_name='Locality ID')
    type = models.CharField(null=True,max_length=3, verbose_name='Type')


class Property(models.Model):
    propId = models.CharField(null=True,max_length=20)
    photoUrl = models.URLField(null=True,)
    mediumPhotoUrl = models.URLField(null=True,)
    preference = models.CharField(null=True,max_length=1)
    description = models.TextField(blank=True, null=True)
    propertyType = models.CharField(max_length=50, blank=True, null=True)
    city = models.CharField(max_length=50, blank=True, null=True)
    locality = models.CharField(max_length=50, blank=True, null=True)
    builtupArea = models.FloatField(blank=True, null=True)
    areaUnit = models.CharField(max_length=10, blank=True, null=True)
    builtupSqft = models.FloatField(blank=True, null=True)
    transactType = models.CharField(max_length=1, blank=True, null=True)
    ownType = models.IntegerField(blank=True, null=True)
    bedroomNum = models.IntegerField(blank=True, null=True)
    bathroomNum = models.IntegerField(blank=True, null=True)
    bathroomAttached = models.CharField(max_length=1, blank=True, null=True)
    balconyAttached = models.CharField(max_length=1, blank=True, null=True)
    balconyNum = models.IntegerField(blank=True, null=True)
    pricePerUnitArea = models.FloatField(blank=True, null=True)
    bookingAmount = models.IntegerField(blank=True, null=True)
    availability = models.CharField(max_length=1, blank=True, null=True)
    furnish = models.IntegerField(blank=True, null=True)
    facing = models.IntegerField(blank=True, null=True)
    age = models.IntegerField(blank=True, null=True)
    floorNum = models.IntegerField(blank=True, null=True)
    totalFloor = models.IntegerField(blank=True, null=True)
    postingDate = models.IntegerField(blank=True, null=True)
    updateDate = models.IntegerField(blank=True, null=True)
    classs = models.CharField(max_length=1,blank=True, null=True)
    resCom = models.CharField(max_length=1,blank=True, null=True)
    propName = models.CharField(max_length=50)
    propertyNumber = models.IntegerField()
    minPrice = models.IntegerField(blank=True, null=True)
    maxPrice = models.IntegerField(blank=True, null=True)
    priceSqft = models.FloatField(blank=True, null=True)
    listing = models.CharField(max_length=1, blank=True, null=True)
    carpetArea = models.FloatField(blank=True, null=True)
    carpetAreaUnit = models.CharField(max_length=10, blank=True, null=True)
    carpetSqft = models.FloatField(blank=True, null=True)
    verified = models.CharField(max_length=1)
    superBuiltUpArea = models.FloatField(blank=True, null=True)
    superBuiltUpAreaUnit = models.CharField(max_length=10, blank=True, null=True)
    superBuiltUpSqft = models.FloatField(blank=True, null=True)
    maskContact = models.CharField(max_length=1, blank=True, null=True)
    confId = models.IntegerField(blank=True, null=True)
    brokerage = models.IntegerField(blank=True, null=True)
    deposit = models.IntegerField(blank=True, null=True)
    depositType = models.CharField(max_length=10, blank=True, null=True)
    cornerProperty = models.CharField(max_length=1, blank=True, null=True)
    reservedParking = models.TextField(blank=True, null=True)
    mapDetails = models.ForeignKey(MapDetails, on_delete=models.CASCADE)
    fslData = models.ForeignKey(FSLData, on_delete=models.CASCADE)
    minAreaSqft = models.FloatField(blank=True, null=True)
    maxAreaSqft = models.FloatField(blank=True, null=True)
    showBsp = models.BooleanField(null=True)
    isNewLaunch = models.CharField(max_length=1, blank=True, null=True)
    isPosterReraRegistered = models.CharField(max_length=2, blank=True, null=True)
    isDealerReraRegistered = models.CharField(max_length=2, blank=True, null=True)
    formatted = models.ForeignKey(Formatted, on_delete=models.DO_NOTHING)
    havephoto = models.CharField(max_length=1, blank=True, null=True)
    altTag = models.CharField(max_length=20, blank=True, null=True)
    isPreLeased = models.BooleanField(null=True)
    preLeasedCurrentRent = models.IntegerField(blank=True, null=True)
    productType = models.CharField(max_length=20, blank=True, null=True)
    topUsps  = models.TextField(verbose_name="TopUsps", null=True, blank=True)
    selfVerified = models.CharField(max_length=1, blank=True, null=True)
    expiryDate = models.DateTimeField(blank=True, null=True)
    gated = models.CharField(max_length=1, blank=True, null=True)
    groupName = models.CharField(max_length=20, blank=True, null=True)
    groupMeta = models.TextField(blank=True, null=True)
    propertyTypeU = models.IntegerField(blank=True, null=True)
    areaUnitU = models.IntegerField(blank=True, null=True)
    postingDateU = models.IntegerField(blank=True, null=True)
    updateDateU = models.IntegerField(blank=True, null=True)
    carpetAreaUnitU = models.FloatField(verbose_name="CARPETAREA_UNIT__U")
    superBuiltupAreaUnitU = models.FloatField(verbose_name="SUPERBUILTUPAREA_UNIT__U")
    expiryDateU = models.CharField(max_length=100, verbose_name="ExpiryDate")
    area = models.CharField(max_length=100, verbose_name="AREA")
    secondaryArea = models.CharField(max_length=100, verbose_name="SECONDARY_AREA")
    price = models.CharField(max_length=100, verbose_name="PRICE")
    propHeading = models.CharField(max_length=100, verbose_name="PROP_HEADING")
    propDetailsUrl = models.CharField(max_length=100, verbose_name="PROP_DETAILS_URL")
    valueLabel = models.CharField(max_length=100, verbose_name="VALUE_LABEL")
    classHeading = models.CharField(max_length=100, verbose_name="CLASS_HEADING")
    page = models.PositiveSmallIntegerField(verbose_name="PAGE")
    classLabel = models.CharField(max_length=100, verbose_name="CLASS_LABEL")
    isFSL = models.CharField(max_length=2, verbose_name="IS_FSL")
    isFresh = models.BooleanField(verbose_name="IS_FRESH")
    shortlisted = models.CharField(max_length=2, verbose_name="SHORTLISTED")
    reported = models.CharField(max_length=2, verbose_name="REPORTED")
    registerDate = models.CharField(max_length=100, verbose_name="REGISTER_DATE__U")
    postedOnColored = models.BooleanField(verbose_name="POSTED_ON_COLORED")
    totalLandmarkCount = models.PositiveSmallIntegerField(verbose_name="Total Landmark Count")
    formattedLandmarkDetails = models.ForeignKey(FormattedLandmarkDetails,null=True, on_delete=models.SET_NULL)
    contactCityName = models.PositiveSmallIntegerField(verbose_name="Contact City Name")
    contactName = models.CharField(verbose_name="Contact Name", max_length=100)
    contactCompanyName = models.CharField(verbose_name="Contact Company Name", max_length=100)
    dealerPhotoUrl = models.URLField(verbose_name="Dealer Photo URL")
    isDefaultDealerImage = models.CharField(verbose_name="Is Default Dealer Image", max_length=1)
    assignedToProfileid = models.PositiveIntegerField(verbose_name="Assigned To Profile ID")
    societyName = models.CharField(verbose_name="Society Name", max_length=100)
    buildingName = models.CharField(verbose_name="Building Name", max_length=100)
    cityId = models.PositiveSmallIntegerField(verbose_name="City ID")
    localityWoCity = models.CharField(verbose_name="Locality Without City", max_length=100)
    profile = models.ForeignKey(Profile, null=True, on_delete=models.SET_NULL )
    registrationStatus = models.CharField(verbose_name="Registration Status", max_length=100)
    projectHighlights = models.TextField( default='', blank=True, verbose_name="Project Highlights")
    projectRating = models.FloatField(verbose_name="Project Rating")
    metadata = models.ForeignKey(MetaData, on_delete=models.DO_NOTHING)
    location = models.ForeignKey(Location, null=True, on_delete=models.SET_NULL)

class Image(models.Model):
    property = models.ForeignKey(Property, on_delete=models.CASCADE)
    image_url = models.URLField(max_length=500)

    def __str__(self):
        return self.image_url
